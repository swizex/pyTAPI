# pyTAPI

Stands for py(why not? gotta respect tradition...) Teddys Application Programming Interface.

this api is a collection of stuff i often use and or wanted to make easier/faster for myself to implement stuff
without hassle.

so far this api has the following functionalitys:

* Generate a Hash (using the flask_hashing library)
* Generate a Fernet encryption key (using cryptography.fernet library)
* Encrypt a bytes array (using cryptography.fernet library)
* Decrypt a bytes array (using cryptography.fernet library)
* MysqlClient custom object for faster integration (using mysql-client library)

## Example Usages

### Generating a hash

to generate a hash simply use the following commands:

```python
_content = 'some content'
_salt = 'some salt'

h = pyTAPI.generate_hash(_content, _salt)
```

### Generating a Fernet key

to generate a fernet key simply use the following command:

```python
key = pyTAPI.generate_key()
```

### Encrypting Data

to encrypt a bytes array simply use the following commands:

```python

_key = b'keyhere'
_data = b'message'

encrypted_data = pyTAPI.encrypt_data(_key, _data)

```

where `_key` is a fernet key and where ``_data` is a bytes array

### Decrypting Data

to decrypt a fernet token simply use the following commands:

```python

decypted_data = pyTAPI.decrypt_data(_key, _token)

```

where `_key` is your fernet key, and `_token` is the generated fernet token

### using the custom mysql-client object

```python

# how to use the mysql connector object
_connector = pyTAPI.MysqlConnector()  # creating a new mysqlconnector object

_connector.server = 'mysql.server.io'  # MySQL server ip/hostname
_connector.username = 'admin'  # MySQL username
_connector.password = 'password'  # MySQL password
_connector.database_name = 'database_schema'  # MySQL Database Schema name

_session = _connector.connect()  # connecting to mysql database

_session.query('')  # querying database

# if you intend on inserting a value or updating it, use this additional line to apply your query:
# _session.commit()

_result = _session.store_result()  # store the results

_row = _result.fetch_row()  # fetching a row

```